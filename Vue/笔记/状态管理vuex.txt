# React 的开发者请参考一下信息

如果你事来自react的开发者，你可能会对Vuex喝redux间的差异表示关注，Redux是React生态环境中最流行的Flux实现。Redux时间上无法感知视图层，所以它能够轻松的通过一些简单绑定和VUE一起使用。Vue区别在于它是一个专门为VUe应用所设计。这使的它能够更好地和Vue进行整合，同时提供简洁的API和改善过的开发体验。

简单状态管理起步使用

经常被忽略的是，Vue应用中原始数据对象的实际来源-当访问数据对象时，一个Vue实例只是简单的代理访问。所以，如果你又一处需要被多个实例间共享的状态，可以简单地通过维护一份数据来实现共享：

const sourceOfTruth = {};

const vmA = new Vue({
    data: sourceOfTruth
})

const vmB = new Vue({
    data: sourceOfTruth
})

现在当sourceOfTruth发生变化，vmA和vmB都将自动更新引用它们的视图。子组件们的每个实例也会通过this.$root.$data去访问。现在我们有了唯一的实际来源，但是调试将会变为噩梦。任何时间，我们应用中得任何部分，在任何数据改变后，都不会留下变更过的记录。

为了解决这个问题，我们采用一个简单的store模式：

var store = {
    debug: true,
    state: {
        message: 'Hello!'
    },
    setMessageAction (newValue) {
        if (this.debug) {
            console.log('setMessageAction triggered with', newValue)
        }
        this.state.message = newValue
    },
    clearMessageAction () {
        if (this.debug) {
            console.log('clearMessageAction triggered')
        }
        this.state.message = ''
    }
}

需要注意，所有store中state得改变，都放置在store自身的action中去管理。这种集中状态管理能够被更容易地理解那种类型的mutation将会发生，以及它们是如何被触发。当错误出现时，我们现在也会有一个log记录bug之前发生了什么。

此外，每个实例/组件仍然可以拥有和管理自己的私有状态：

var vmA = new Vue({
    data: {
        privateState: {},
        sharedState: store.state
    }
})

var vmB = new Vue({
    data: {
        privateState: {},
        sharedState: store.state
    }
})

重要的是，注意你不应该在action中替换原始的状态对象-组件和store需要引用同一个共享对象，mutation才能够被观察。

接着我们继续延伸约定，组件不允许直接修改属于store实例的state，而应执行action来分发dispatch事件通过store去改变，我们最终达成了Flux架构。这样约定的好处是，我们能够记录所有store中发生的state改变，同时实现能够做到记录变更、保存状态快照、历史回滚/时光旅行的先进调试工具

