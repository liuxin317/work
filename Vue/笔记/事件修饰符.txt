事件修饰符

在事件处理程序中调用event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理DOM事件细节。

为了解决这个问题，vue为v-on提供了事件修饰符。之前提过，修饰符是由点开头的指令来表示的。

* .stop 
阻止单击事件继续传播
<a @click.stop="doThis"></a>

* .prevent
提交事件不再重载页面
<form @submit.prevent="onSubmit"></form>

修饰符可以串联
<a @click.stop.prevent=""></a>

* .captrue
添加事件监听器时使用事件捕获模式；即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理
<div @click.captrue="doThis"></div>

* self
只当在event.target是当前元素自身时触发处理函数；即事件不是从内部元素触发的
<div @click.self=""></div>

* once
点击事件将只会触发一次
<a @click.once=""></a>

* passive
滚动事件的默认行为（即滚动行为）将会立即触发;而不会等待onScroll完成；这其中包含event.preventDefault()的情况
<div @scroll.passive="onScroll"></div>

注意：不要把.passive和.prevent一起使用，因为.prevent将会被忽略，同时浏览器可能会向你展示一个警告，请记住，.passive会告诉浏览器不想阻止事件的默认行为.

* 在监听键盘事件时，我们经常需要检查常见的键值。vue允许为v-on 在监听键盘事件时添加按钮修饰符：

只有在keyCode是13时调用vm.submit()
<input @:keyup.13="submit" />

记住所有的keyCode比较困难，所以Vue为最常用的案件提供了别名：

<input @keyup.enter="submit" />

全部的按键别名：
    - .enter
    - .tab
    - .delete （捕获删除和退格键）
    - .esc
    - .space
    - .up
    - .down
    - .left
    - .right
可以通过全局config.keyCodes 对象自定义按键修饰符别名

// 可以使用 v-on.keyup.f1
Vue.config.keyCodes.f1 = 112;

# 系统修饰符

可以用如下修饰符来实现仅在按下相应按键时触发鼠标或键盘事件的监听器：

    - .ctrl
    - .alt
    - .shift
    - .meta

注意：在mac系统键盘上，meta对应command键。在windows系统键盘meta对应windows微标键。在Sun操作系统键盘上，meta对应实心宝石键。

Alt + C 
<input @keyup.alt.67="clear" />

ctrl + click
<div @click.ctrl="doSomething"></div>

注意：修饰符与常规按键不同，在和keyup事件一起用时，事件触发时修饰符必须处于按下状态。换句话说，只有在按住Ctrl的情况下释放其他按键，才能触发keyup.ctrl。而单单释放ctrl也不会触发事件。

# .exact 修饰符

exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。

即使Alt或shift被一同按下时也会触发
<button @click.ctrl="onClick">A</button>

有且只有ctrl被按下的时候才触发
<button @click.ctrl.exact="onCtrlClick">A</button>

没有任何系统修饰符被按下的时候才触发
<buttton @click.exact="onClick">A</button>

# 鼠标按钮修饰符

.left
.right 
.middle

这些修饰符会限制处理函数仅响应特定的鼠标按钮。


#为什么在HTML中监听事件？

你可能注意到这种事件监听的方式违背了关注点分离这个长期以来的优良传统。但不必担心，因为所有的vue时间内处理方式和表达方式都严格绑定在当前视图的ViewModel上，它不会导致任何维护上得困难。实际上，使用v-on有几个好处：

1、扫一眼HTML模板便能轻松定位在Javascript代码里对应的方法。

2、因为你无须在Javascript里手动绑定事件，你的ViewModel代码可以是非常纯粹的逻辑，和DOM完全解耦，更易于测试。

3、当一个ViewModel被摧毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。