生命周期的类型都是：function

# beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用

# created 在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测，属性和方法的运算，watch/event事件回调。然而，挂载阶段还没开始，$el属性目前不可见

# beforeMount 在挂载开始之前被调用：相关的render函数首次被调用。

# mounted el被创建的vm.$el替换，并挂载到实例之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.$el也在文档内。

注意mounted不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用vm.$nextTick替换掉mounted：

mounted: function () {
    this.$nextTick(function () { // 整个视图都渲染完毕
        
    })
}

# beforeUpdate

数据更新时调用，发生在虚拟DOM打补丁之前。这里适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器。

updated

由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。

当这个钩子被调用时，组件DOM已经更新，所以你现在可以执行依赖于DOM的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或watcher取而代之。

注意updated不会承诺所有的子组件也都一起重绘。如果你希望等到整个视图都重绘完毕，可以用vm.$nextTick替换掉updated:

updated: function () {
    this.$nextTick(function () {

    })
}

# activated

keep-alive 组件激活时调用。

# deactivated

keep-alive 组件停用时调用。

# beforeDestroy

实例摧毁之前调用。在这一步，实例仍然完全可用。

# destroyed

vue实例销毁后调用。调用后，vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。

# errorCaptured

当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回false以组织该错误继续向上传播